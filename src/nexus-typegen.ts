/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CoverInput: { // input type
    file: string; // String!
    lang: number; // Int!
  }
  DescriptionInput: { // input type
    lang: number; // Int!
    text: string; // String!
  }
  PeopleInput: { // input type
    id: number; // Int!
  }
  PublisherInput: { // input type
    id: number; // Int!
  }
  TitleInput: { // input type
    lang: number; // Int!
    text: string; // String!
  }
}

export interface NexusGenEnums {
  AgeRating: "R_12" | "R_16" | "R_18"
  MangaSorting: "LATEST_UPDATES" | "NEW" | "POPULARITY"
  MangaStatus: "finish" | "ongoing" | "release"
  SortingDirection: "DESC"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Language: { // root type
    id: number; // Int!
    name: string; // String!
  }
  Manga: { // root type
    added: string; // String!
    ageRating: string; // String!
    artist: Array<NexusGenRootTypes['People'] | null>; // [People]!
    author: Array<NexusGenRootTypes['People'] | null>; // [People]!
    cover: Array<NexusGenRootTypes['MangaCover'] | null>; // [MangaCover]!
    description: Array<NexusGenRootTypes['MangaDescription'] | null>; // [MangaDescription]!
    id: number; // Int!
    publisher: Array<NexusGenRootTypes['Publisher'] | null>; // [Publisher]!
    title: Array<NexusGenRootTypes['MangaTitle'] | null>; // [MangaTitle]!
    year?: number | null; // Int
  }
  MangaCover: { // root type
    file: string; // String!
    id: number; // Int!
    lang: number; // Int!
    mangaId: number; // Int!
  }
  MangaDescription: { // root type
    id: number; // Int!
    lang: number; // Int!
    mangaId: number; // Int!
    text: string; // String!
  }
  MangaTitle: { // root type
    id: number; // Int!
    lang: number; // Int!
    mangaId: number; // Int!
    text: string; // String!
  }
  Mutation: {};
  People: { // root type
    id: number; // Int!
    name: string; // String!
  }
  Publisher: { // root type
    id: number; // Int!
    name: string; // String!
  }
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Language: { // field return type
    id: number; // Int!
    name: string; // String!
  }
  Manga: { // field return type
    added: string; // String!
    ageRating: string; // String!
    artist: Array<NexusGenRootTypes['People'] | null>; // [People]!
    author: Array<NexusGenRootTypes['People'] | null>; // [People]!
    cover: Array<NexusGenRootTypes['MangaCover'] | null>; // [MangaCover]!
    description: Array<NexusGenRootTypes['MangaDescription'] | null>; // [MangaDescription]!
    id: number; // Int!
    publisher: Array<NexusGenRootTypes['Publisher'] | null>; // [Publisher]!
    title: Array<NexusGenRootTypes['MangaTitle'] | null>; // [MangaTitle]!
    year: number | null; // Int
  }
  MangaCover: { // field return type
    file: string; // String!
    id: number; // Int!
    lang: number; // Int!
    langCodes: NexusGenRootTypes['Language'] | null; // Language
    mangaId: number; // Int!
  }
  MangaDescription: { // field return type
    id: number; // Int!
    lang: number; // Int!
    langCodes: NexusGenRootTypes['Language'] | null; // Language
    mangaId: number; // Int!
    text: string; // String!
  }
  MangaTitle: { // field return type
    id: number; // Int!
    lang: number; // Int!
    langCodes: NexusGenRootTypes['Language'] | null; // Language
    mangaId: number; // Int!
    text: string; // String!
  }
  Mutation: { // field return type
    createLanguage: NexusGenRootTypes['Language']; // Language!
    createManga: NexusGenRootTypes['Manga']; // Manga!
    createPeople: NexusGenRootTypes['People']; // People!
    createPublisher: NexusGenRootTypes['Publisher']; // Publisher!
  }
  People: { // field return type
    id: number; // Int!
    name: string; // String!
  }
  Publisher: { // field return type
    id: number; // Int!
    name: string; // String!
  }
  Query: { // field return type
    manga: NexusGenRootTypes['Manga']; // Manga!
    mangaList: NexusGenRootTypes['Manga'][]; // [Manga!]!
  }
}

export interface NexusGenFieldTypeNames {
  Language: { // field return type name
    id: 'Int'
    name: 'String'
  }
  Manga: { // field return type name
    added: 'String'
    ageRating: 'String'
    artist: 'People'
    author: 'People'
    cover: 'MangaCover'
    description: 'MangaDescription'
    id: 'Int'
    publisher: 'Publisher'
    title: 'MangaTitle'
    year: 'Int'
  }
  MangaCover: { // field return type name
    file: 'String'
    id: 'Int'
    lang: 'Int'
    langCodes: 'Language'
    mangaId: 'Int'
  }
  MangaDescription: { // field return type name
    id: 'Int'
    lang: 'Int'
    langCodes: 'Language'
    mangaId: 'Int'
    text: 'String'
  }
  MangaTitle: { // field return type name
    id: 'Int'
    lang: 'Int'
    langCodes: 'Language'
    mangaId: 'Int'
    text: 'String'
  }
  Mutation: { // field return type name
    createLanguage: 'Language'
    createManga: 'Manga'
    createPeople: 'People'
    createPublisher: 'Publisher'
  }
  People: { // field return type name
    id: 'Int'
    name: 'String'
  }
  Publisher: { // field return type name
    id: 'Int'
    name: 'String'
  }
  Query: { // field return type name
    manga: 'Manga'
    mangaList: 'Manga'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createLanguage: { // args
      name: string; // String!
    }
    createManga: { // args
      age_rating: NexusGenEnums['AgeRating']; // AgeRating!
      artist?: NexusGenInputs['PeopleInput'][] | null; // [PeopleInput!]
      author?: NexusGenInputs['PeopleInput'][] | null; // [PeopleInput!]
      cover: NexusGenInputs['CoverInput'][]; // [CoverInput!]!
      description: NexusGenInputs['DescriptionInput'][]; // [DescriptionInput!]!
      publisher?: NexusGenInputs['PublisherInput'][] | null; // [PublisherInput!]
      status: NexusGenEnums['MangaStatus']; // MangaStatus!
      title: NexusGenInputs['TitleInput'][]; // [TitleInput!]!
      year: number; // Int!
    }
    createPeople: { // args
      name: string; // String!
    }
    createPublisher: { // args
      name: string; // String!
    }
  }
  Query: {
    manga: { // args
      id: number; // Int!
      langId?: Array<number | null> | null; // [Int]
    }
    mangaList: { // args
      direction?: NexusGenEnums['SortingDirection'] | null; // SortingDirection
      genres?: string | null; // String
      langId?: Array<number | null> | null; // [Int]
      limit?: number | null; // Int
      page?: number | null; // Int
      sorting?: NexusGenEnums['MangaSorting'] | null; // MangaSorting
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}